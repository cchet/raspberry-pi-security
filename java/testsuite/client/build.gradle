def dockerRootLocation = project.buildDir.absolutePath + "/docker"
def dockerAppLocation = dockerRootLocation + "/app"
def dockerAuthLocation = dockerRootLocation + "/auth"
def networkName = "sveprojekt_sve_net"

dependencies {
    testCompile 'org.springframework:spring-web'
    testCompile "com.palantir.docker.compose:docker-compose-rule-junit4"
    testCompile "junit:junit"
    testCompile "org.slf4j:slf4j-simple"
    testCompile project(':shared')
    testCompile project(':swagger/client/app')
    testCompile project(':swagger/client/auth')
}

// add network sve_net for testing
task prepareEnvironment(type: Exec) {
    try {
        executable "docker"
        args "network", "create", "${networkName}"
    }
    catch(org.gradle.process.internal.ExecException e)
    {
        println 'network exists alread...'
    }
}

// remove network sve_net after testing
task cleanupEnvironment(type: Exec) {
    try {
        executable "docker"
        args "network", "rm", "${networkName}"
    }
    catch(org.gradle.process.internal.ExecException e) {
        println 'network does not exists ...'
    }
}

test {
    systemProperty "jenkins", System.getProperty("jenkins")
    systemProperty "nginx.host", System.getProperty("nginx.host")

    filter {
        includeTestsMatching '*.*Suite'
    }
    doFirst {
        if(!System.getProperty("jenkins")) {
            try {
                prepareEnvironment.execute()
            }
            catch(TaskExecutionException e) {
                println "ignore exception - it caused from docker because of already existing network '${networkName}'"
            }
        }

        // Set environment variables if executed on a windows system
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            if (System.getenv('DOCKER_COMPOSE_LOCATION') == null) {
                environment('DOCKER_COMPOSE_LOCATION', 'C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker-compose.exe')
            }
            if (System.getenv('DOCKER_LOCATION') == null) {
                environment('DOCKER_LOCATION', 'C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe')
            }
        }
    }
    doLast {
        if(!System.getProperty("jenkins")) {
            try {
                cleanupEnvironment.execute()
            }
            catch(TaskExecutionException e) {
                println "ignore exception - it caused from docker because of not existing network '${networkName}'"
            }
        }
    }
}

task cleanState() {
    gradle.taskGraph.whenReady { taskGraph ->
        def tasks = taskGraph.getAllTasks()
        tasks.each {
            it.setOnlyIf { true }
            it.outputs.upToDateWhen { false }
        }
    }
    setOnlyIf { true }
    outputs.upToDateWhen { false }
}

task prepareDockerInfrastructure(dependsOn: [':app:buildFatJar', ':auth:buildFatJar', 'compileJava', 'compileTestJava', 'processResources', 'processTestResources']) {
    doLast {
        def appConfig = System.getProperty("app.config") ?: ""
        def authConfig = System.getProperty("auth.config") ?: ""
        def firebaseConfig = System.getProperty("firebase.config") ?: ""

        copy {
            from sourceSets.main.resources.asFileTree.matching {
                include '**/docker/app/*'
                include '**/docker/auth/*'
                include '**/docker/nginx/*'
                include '**/docker/volumes/**/*'
                include '**/docker/docker-compose.yml'
                exclude '**/docker/**/dummy*'
            }
            into project.buildDir.absolutePath
        }

        if (!appConfig.isEmpty()) {
            copy {
                from new File(appConfig)
                into dockerAppLocation
            }
        }
        if (!authConfig.isEmpty()) {
            copy {
                from new File(authConfig)
                into dockerAuthLocation
            }
        }
        if (!firebaseConfig.isEmpty()) {
            def firebaseConfigFile = new File(firebaseConfig)
            copy {
                from firebaseConfigFile
                into dockerAppLocation
            }
            copy {
                from firebaseConfigFile
                into dockerAuthLocation
            }
        }

        copy {
            from project(":app").jar.archivePath
            into dockerAppLocation
            rename(project(":app").jar.archiveName, "app.jar")
        }
        copy {
            from project(":auth").jar.archivePath
            into dockerAuthLocation
            rename(project(":auth").jar.archiveName, "app.jar")
        }
    }
}