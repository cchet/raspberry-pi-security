def dockerRootLocation = project.buildDir.absolutePath + "/docker"
def dockerAppLocation = dockerRootLocation + "/app"
def dockerAuthLocation = dockerRootLocation + "/auth"

dependencies {
    compile project(':shared')
    compile project(':testsuite/base')
    testCompile 'com.palantir.docker.compose:docker-compose-rule-junit4'
}

test {
    filter {
        includeTestsMatching '*.test.*'
    }
    // Set environment variables if executed on a windows system
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        environment('DOCKER_COMPOSE_LOCATION', 'C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker-compose.exe')
        environment('DOCKER_LOCATION', 'C:\\Program Files\\Docker\\Docker\\resources\\bin\\docker.exe')
    }
    dependsOn = ['perpareDockerInfrastructure']
}

clean.doFirst {
    project.buildDir.delete()
}

task perpareDockerInfrastructure(type: Copy, dependsOn: ['compileJava', 'compileTestJava', 'processResources', 'processTestResources', ':app:buildFatJar', ':auth:buildFatJar']) {

    def appConfig = System.getProperty("app.config") ?: ""
    def authConfig = System.getProperty("auth.config") ?: ""
    def appFirebaseConfig = System.getProperty("app.firebaseConfig") ?: ""
    def authFirebaseConfig = System.getProperty("auth.firebaseConfig") ?: ""

    logger.info("---------------------------------------------------------------------------")
    logger.info("Set JVM Options for configuration")
    logger.info("---------------------------------------------------------------------------")
    logger.info("app.config:" + appConfig)
    logger.info("auth.config:" + authConfig)
    logger.info("app.firebaseConfig:" + appFirebaseConfig)
    logger.info("auth.firebaseConfig:" + authFirebaseConfig)
    logger.info("---------------------------------------------------------------------------")

    copy {
        from sourceSets.main.resources.asFileTree.matching {
            include '**/docker/**/*'
            exclude '**/docker/**/dummy*'
        }
        into project.buildDir.absolutePath
    }
    if(!appConfig.isEmpty()) {
        copy {
            from new File(appConfig)
            into dockerAppLocation
        }
    }
    if(!authConfig.isEmpty()) {
        copy {
            from new File(authConfig)
            into dockerAuthLocation
        }
    }
    if(!appFirebaseConfig.isEmpty()) {
        copy {
            from new File(appFirebaseConfig)
            into dockerAppLocation
        }
    }
    if(!authFirebaseConfig.isEmpty()) {
        copy {
            from new File(authFirebaseConfig)
            into dockerAuthLocation
        }
    }
    copy {
        from project(":app").jar.archivePath
        into dockerAppLocation
        rename(project(":app").jar.archiveName, "app.jar")
    }
    copy {
        from project(":auth").jar.archivePath
        into dockerAuthLocation
        rename(project(":auth").jar.archiveName, "app.jar")
    }
}