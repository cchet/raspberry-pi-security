buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    ext {
        springloadedVersion = '1.2.7.RELEASE'
        isProd = System.getProperty('platform')?.contains("prod") ?: false
        isIntegrationTest = System.getProperty('platform')?.contains("integrationTest")
    }

    dependencies {
        classpath "org.springframework:springloaded:${springloadedVersion}"
    }
}

apply plugin: 'org.springframework.boot'

bootRun {
    // Must always be provided
    systemProperties['spring.profiles.active'] = System.getProperty('platform')
    systemProperties['spring.config.location'] = System.getProperty("spring.config.location")
    systemProperties['admin.email'] = System.getProperty("admin.email")
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

sourceSets {
    main {
        resources {
            if (isProd || isIntegrationTest) {
                exclude 'schema-H2.sql'
                exclude 'application-dev.properties'
            } else {
                exclude 'schema-POSTGRES.sql'
                exclude 'application-prod.properties'
            }
        }
    }
}

clean.doFirst {
    project.buildDir.delete()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.security.oauth:spring-security-oauth2')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-mail')
    if (isProd || isIntegrationTest) {
        compile("org.postgresql:postgresql")
    } else {
        compile("com.h2database:h2")
    }
    compile("io.springfox:springfox-swagger2")
    compile("io.springfox:springfox-swagger-ui")
    compile("io.springfox:springfox-bean-validators")
    compile("org.apache.commons:commons-io")
    compile("ma.glasnost.orika:orika-core")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    compile('org.webjars:bootstrap')
    compile("com.google.firebase:firebase-admin")

    testCompile('org.springframework.boot:spring-boot-starter-test')

    compile project(':shared')
}

// creates the fat jar
task buildFatJar(type: GradleBuild) {
    buildFile = 'build.gradle'
    tasks = ['clean', 'compileJava', 'processResources', 'bootRepackage', 'jar']
}