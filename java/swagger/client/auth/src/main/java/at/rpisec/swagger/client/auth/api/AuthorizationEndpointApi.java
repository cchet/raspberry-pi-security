/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package at.rpisec.swagger.client.auth.api;

import at.rpisec.swagger.client.auth.invoker.ApiCallback;
import at.rpisec.swagger.client.auth.invoker.ApiClient;
import at.rpisec.swagger.client.auth.invoker.ApiException;
import at.rpisec.swagger.client.auth.invoker.ApiResponse;
import at.rpisec.swagger.client.auth.invoker.Configuration;
import at.rpisec.swagger.client.auth.invoker.Pair;
import at.rpisec.swagger.client.auth.invoker.ProgressRequestBody;
import at.rpisec.swagger.client.auth.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import at.rpisec.swagger.client.auth.model.ModelAndView;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthorizationEndpointApi {
    private ApiClient apiClient;

    public AuthorizationEndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizationEndpointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for authorizeUsingDELETE */
    private com.squareup.okhttp.Call authorizeUsingDELETECall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingDELETEValidateBeforeCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizeUsingDELETE(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingDELETECall(parameters, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView authorizeUsingDELETE(String parameters, Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = authorizeUsingDELETEWithHttpInfo(parameters, model);
        return resp.getData();
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> authorizeUsingDELETEWithHttpInfo(String parameters, Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingDELETEValidateBeforeCall(parameters, model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * authorize (asynchronously)
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingDELETEAsync(String parameters, Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingDELETEValidateBeforeCall(parameters, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authorizeUsingGET */
    private com.squareup.okhttp.Call authorizeUsingGETCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingGETValidateBeforeCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizeUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingGETCall(parameters, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView authorizeUsingGET(String parameters, Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = authorizeUsingGETWithHttpInfo(parameters, model);
        return resp.getData();
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> authorizeUsingGETWithHttpInfo(String parameters, Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingGETValidateBeforeCall(parameters, model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * authorize (asynchronously)
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingGETAsync(String parameters, Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingGETValidateBeforeCall(parameters, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authorizeUsingHEAD */
    private com.squareup.okhttp.Call authorizeUsingHEADCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "HEAD", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingHEADValidateBeforeCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizeUsingHEAD(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingHEADCall(parameters, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView authorizeUsingHEAD(String parameters, Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = authorizeUsingHEADWithHttpInfo(parameters, model);
        return resp.getData();
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> authorizeUsingHEADWithHttpInfo(String parameters, Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingHEADValidateBeforeCall(parameters, model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * authorize (asynchronously)
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingHEADAsync(String parameters, Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingHEADValidateBeforeCall(parameters, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authorizeUsingOPTIONS */
    private com.squareup.okhttp.Call authorizeUsingOPTIONSCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingOPTIONSValidateBeforeCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizeUsingOPTIONS(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingOPTIONSCall(parameters, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView authorizeUsingOPTIONS(String parameters, Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = authorizeUsingOPTIONSWithHttpInfo(parameters, model);
        return resp.getData();
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> authorizeUsingOPTIONSWithHttpInfo(String parameters, Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingOPTIONSValidateBeforeCall(parameters, model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * authorize (asynchronously)
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingOPTIONSAsync(String parameters, Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingOPTIONSValidateBeforeCall(parameters, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authorizeUsingPATCH */
    private com.squareup.okhttp.Call authorizeUsingPATCHCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingPATCHValidateBeforeCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizeUsingPATCH(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingPATCHCall(parameters, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView authorizeUsingPATCH(String parameters, Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = authorizeUsingPATCHWithHttpInfo(parameters, model);
        return resp.getData();
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> authorizeUsingPATCHWithHttpInfo(String parameters, Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingPATCHValidateBeforeCall(parameters, model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * authorize (asynchronously)
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingPATCHAsync(String parameters, Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingPATCHValidateBeforeCall(parameters, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authorizeUsingPOST */
    private com.squareup.okhttp.Call authorizeUsingPOSTCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingPOSTValidateBeforeCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizeUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingPOSTCall(parameters, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView authorizeUsingPOST(String parameters, Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = authorizeUsingPOSTWithHttpInfo(parameters, model);
        return resp.getData();
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> authorizeUsingPOSTWithHttpInfo(String parameters, Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingPOSTValidateBeforeCall(parameters, model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * authorize (asynchronously)
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingPOSTAsync(String parameters, Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingPOSTValidateBeforeCall(parameters, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for authorizeUsingPUT */
    private com.squareup.okhttp.Call authorizeUsingPUTCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/authorize".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));
        if (parameters != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "parameters", parameters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call authorizeUsingPUTValidateBeforeCall(String parameters, Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling authorizeUsingPUT(Async)");
        }
        
        
        com.squareup.okhttp.Call call = authorizeUsingPUTCall(parameters, model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView authorizeUsingPUT(String parameters, Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = authorizeUsingPUTWithHttpInfo(parameters, model);
        return resp.getData();
    }

    /**
     * authorize
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> authorizeUsingPUTWithHttpInfo(String parameters, Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = authorizeUsingPUTValidateBeforeCall(parameters, model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * authorize (asynchronously)
     * 
     * @param parameters parameters (required)
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call authorizeUsingPUTAsync(String parameters, Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = authorizeUsingPUTValidateBeforeCall(parameters, model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
