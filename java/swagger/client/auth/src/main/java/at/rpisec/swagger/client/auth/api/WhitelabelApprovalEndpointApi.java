/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package at.rpisec.swagger.client.auth.api;

import at.rpisec.swagger.client.auth.invoker.ApiCallback;
import at.rpisec.swagger.client.auth.invoker.ApiClient;
import at.rpisec.swagger.client.auth.invoker.ApiException;
import at.rpisec.swagger.client.auth.invoker.ApiResponse;
import at.rpisec.swagger.client.auth.invoker.Configuration;
import at.rpisec.swagger.client.auth.invoker.Pair;
import at.rpisec.swagger.client.auth.invoker.ProgressRequestBody;
import at.rpisec.swagger.client.auth.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import at.rpisec.swagger.client.auth.model.ModelAndView;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WhitelabelApprovalEndpointApi {
    private ApiClient apiClient;

    public WhitelabelApprovalEndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WhitelabelApprovalEndpointApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for getAccessConfirmationUsingDELETE */
    private com.squareup.okhttp.Call getAccessConfirmationUsingDELETECall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/confirm_access".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessConfirmationUsingDELETEValidateBeforeCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAccessConfirmationUsingDELETECall(model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView getAccessConfirmationUsingDELETE(Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = getAccessConfirmationUsingDELETEWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> getAccessConfirmationUsingDELETEWithHttpInfo(Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = getAccessConfirmationUsingDELETEValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccessConfirmation (asynchronously)
     * 
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessConfirmationUsingDELETEAsync(Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessConfirmationUsingDELETEValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAccessConfirmationUsingGET */
    private com.squareup.okhttp.Call getAccessConfirmationUsingGETCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/confirm_access".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessConfirmationUsingGETValidateBeforeCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAccessConfirmationUsingGETCall(model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView getAccessConfirmationUsingGET(Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = getAccessConfirmationUsingGETWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> getAccessConfirmationUsingGETWithHttpInfo(Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = getAccessConfirmationUsingGETValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccessConfirmation (asynchronously)
     * 
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessConfirmationUsingGETAsync(Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessConfirmationUsingGETValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAccessConfirmationUsingHEAD */
    private com.squareup.okhttp.Call getAccessConfirmationUsingHEADCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/confirm_access".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "HEAD", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessConfirmationUsingHEADValidateBeforeCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAccessConfirmationUsingHEADCall(model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView getAccessConfirmationUsingHEAD(Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = getAccessConfirmationUsingHEADWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> getAccessConfirmationUsingHEADWithHttpInfo(Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = getAccessConfirmationUsingHEADValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccessConfirmation (asynchronously)
     * 
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessConfirmationUsingHEADAsync(Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessConfirmationUsingHEADValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAccessConfirmationUsingOPTIONS */
    private com.squareup.okhttp.Call getAccessConfirmationUsingOPTIONSCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/confirm_access".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "OPTIONS", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessConfirmationUsingOPTIONSValidateBeforeCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAccessConfirmationUsingOPTIONSCall(model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView getAccessConfirmationUsingOPTIONS(Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = getAccessConfirmationUsingOPTIONSWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> getAccessConfirmationUsingOPTIONSWithHttpInfo(Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = getAccessConfirmationUsingOPTIONSValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccessConfirmation (asynchronously)
     * 
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessConfirmationUsingOPTIONSAsync(Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessConfirmationUsingOPTIONSValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAccessConfirmationUsingPATCH */
    private com.squareup.okhttp.Call getAccessConfirmationUsingPATCHCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/confirm_access".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessConfirmationUsingPATCHValidateBeforeCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAccessConfirmationUsingPATCHCall(model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView getAccessConfirmationUsingPATCH(Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = getAccessConfirmationUsingPATCHWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> getAccessConfirmationUsingPATCHWithHttpInfo(Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = getAccessConfirmationUsingPATCHValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccessConfirmation (asynchronously)
     * 
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessConfirmationUsingPATCHAsync(Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessConfirmationUsingPATCHValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAccessConfirmationUsingPOST */
    private com.squareup.okhttp.Call getAccessConfirmationUsingPOSTCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/confirm_access".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessConfirmationUsingPOSTValidateBeforeCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAccessConfirmationUsingPOSTCall(model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView getAccessConfirmationUsingPOST(Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = getAccessConfirmationUsingPOSTWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> getAccessConfirmationUsingPOSTWithHttpInfo(Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = getAccessConfirmationUsingPOSTValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccessConfirmation (asynchronously)
     * 
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessConfirmationUsingPOSTAsync(Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessConfirmationUsingPOSTValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAccessConfirmationUsingPUT */
    private com.squareup.okhttp.Call getAccessConfirmationUsingPUTCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/oauth/confirm_access".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (model != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "model", model));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccessConfirmationUsingPUTValidateBeforeCall(Map<String, String> model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getAccessConfirmationUsingPUTCall(model, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ModelAndView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelAndView getAccessConfirmationUsingPUT(Map<String, String> model) throws ApiException {
        ApiResponse<ModelAndView> resp = getAccessConfirmationUsingPUTWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * getAccessConfirmation
     * 
     * @param model model (optional)
     * @return ApiResponse&lt;ModelAndView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelAndView> getAccessConfirmationUsingPUTWithHttpInfo(Map<String, String> model) throws ApiException {
        com.squareup.okhttp.Call call = getAccessConfirmationUsingPUTValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getAccessConfirmation (asynchronously)
     * 
     * @param model model (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccessConfirmationUsingPUTAsync(Map<String, String> model, final ApiCallback<ModelAndView> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccessConfirmationUsingPUTValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelAndView>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
